# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import qxdm_pb2 as qxdm__pb2


class QXDMStub(object):
    """The QXDM service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Connect = channel.unary_unary(
                '/QXDM/Connect',
                request_serializer=qxdm__pb2.ConnectRequest.SerializeToString,
                response_deserializer=qxdm__pb2.ConnectResponse.FromString,
                )
        self.Disconnect = channel.unary_unary(
                '/QXDM/Disconnect',
                request_serializer=qxdm__pb2.DisconnectRequest.SerializeToString,
                response_deserializer=qxdm__pb2.DisconnectResponse.FromString,
                )
        self.StartLog = channel.unary_unary(
                '/QXDM/StartLog',
                request_serializer=qxdm__pb2.StartLogRequest.SerializeToString,
                response_deserializer=qxdm__pb2.StartLogResponse.FromString,
                )
        self.SaveLog = channel.unary_stream(
                '/QXDM/SaveLog',
                request_serializer=qxdm__pb2.SaveLogRequest.SerializeToString,
                response_deserializer=qxdm__pb2.SaveLogResponse.FromString,
                )
        self.ParseLog = channel.unary_stream(
                '/QXDM/ParseLog',
                request_serializer=qxdm__pb2.ParseLogRequest.SerializeToString,
                response_deserializer=qxdm__pb2.ParseLogResponse.FromString,
                )
        self.Status = channel.unary_unary(
                '/QXDM/Status',
                request_serializer=qxdm__pb2.StatusRequest.SerializeToString,
                response_deserializer=qxdm__pb2.StatusResponse.FromString,
                )


class QXDMServicer(object):
    """The QXDM service definition.
    """

    def Connect(self, request, context):
        """Connects a device to the QXDM process
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Disconnect(self, request, context):
        """Disconnects a device from the QXDM process
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartLog(self, request, context):
        """Start logging on a QXDM process  
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SaveLog(self, request, context):
        """Save logs on a QXDM process
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ParseLog(self, request, context):
        """Parse saved logs using QCAT
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Status(self, request, context):
        """Get status of QXDM process
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_QXDMServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Connect': grpc.unary_unary_rpc_method_handler(
                    servicer.Connect,
                    request_deserializer=qxdm__pb2.ConnectRequest.FromString,
                    response_serializer=qxdm__pb2.ConnectResponse.SerializeToString,
            ),
            'Disconnect': grpc.unary_unary_rpc_method_handler(
                    servicer.Disconnect,
                    request_deserializer=qxdm__pb2.DisconnectRequest.FromString,
                    response_serializer=qxdm__pb2.DisconnectResponse.SerializeToString,
            ),
            'StartLog': grpc.unary_unary_rpc_method_handler(
                    servicer.StartLog,
                    request_deserializer=qxdm__pb2.StartLogRequest.FromString,
                    response_serializer=qxdm__pb2.StartLogResponse.SerializeToString,
            ),
            'SaveLog': grpc.unary_stream_rpc_method_handler(
                    servicer.SaveLog,
                    request_deserializer=qxdm__pb2.SaveLogRequest.FromString,
                    response_serializer=qxdm__pb2.SaveLogResponse.SerializeToString,
            ),
            'ParseLog': grpc.unary_stream_rpc_method_handler(
                    servicer.ParseLog,
                    request_deserializer=qxdm__pb2.ParseLogRequest.FromString,
                    response_serializer=qxdm__pb2.ParseLogResponse.SerializeToString,
            ),
            'Status': grpc.unary_unary_rpc_method_handler(
                    servicer.Status,
                    request_deserializer=qxdm__pb2.StatusRequest.FromString,
                    response_serializer=qxdm__pb2.StatusResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'QXDM', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class QXDM(object):
    """The QXDM service definition.
    """

    @staticmethod
    def Connect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/QXDM/Connect',
            qxdm__pb2.ConnectRequest.SerializeToString,
            qxdm__pb2.ConnectResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Disconnect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/QXDM/Disconnect',
            qxdm__pb2.DisconnectRequest.SerializeToString,
            qxdm__pb2.DisconnectResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartLog(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/QXDM/StartLog',
            qxdm__pb2.StartLogRequest.SerializeToString,
            qxdm__pb2.StartLogResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SaveLog(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/QXDM/SaveLog',
            qxdm__pb2.SaveLogRequest.SerializeToString,
            qxdm__pb2.SaveLogResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ParseLog(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/QXDM/ParseLog',
            qxdm__pb2.ParseLogRequest.SerializeToString,
            qxdm__pb2.ParseLogResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Status(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/QXDM/Status',
            qxdm__pb2.StatusRequest.SerializeToString,
            qxdm__pb2.StatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
