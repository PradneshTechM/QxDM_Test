
syntax = "proto3";

// The QXDM service definition.
service QXDM {

  // Connects a device to the QXDM process
  rpc Connect(ConnectRequest) returns (ConnectResponse) {}

  // Disconnects a device from the QXDM process
  rpc Disconnect(DisconnectRequest) returns (DisconnectResponse) {}

  // Start logging on a QXDM process  
  rpc StartLog(StartLogRequest) returns (StartLogResponse) {}

  // Save logs on a QXDM process
  rpc SaveLog(SaveLogRequest) returns (stream SaveLogResponse) {}

  // Parse saved logs using QCAT
  rpc ParseLog(ParseLogRequest) returns (stream ParseLogResponse) {}

  // Get status of QXDM process
  rpc Status(StatusRequest) returns (StatusResponse) {}

}

enum ConnectionState {
  DISCONNECTED = 0;
  CONNECTED = 1;
}

// A ConnectRequest is sent as request to a Connect rpc.
message ConnectRequest {
  uint32 device_index = 1;
}

// A ConnectResponse is received in response to a Connect rpc.
message ConnectResponse {
  ConnectionState state = 1;
}

// A DisconnectRequest is sent as request to a Disconnect rpc.
message DisconnectRequest {
  uint32 device_index = 1;
}

// A DisconnectResponse is received in response to a Disconnect rpc.
message DisconnectResponse {
  ConnectionState state = 1;
}

// A StartLogRequest is sent as request to a StartLog rpc.
message StartLogRequest {
  uint32 device_index = 1;
}

// A StartLogResponse is received in response to a StartLog rpc.
message StartLogResponse {
}

// A SaveLogRequest is sent as request to a SaveLog rpc.
message SaveLogRequest {
  uint32 device_index = 1;
  bool send_file = 2;
}

// A SaveLogResponse is received in response to a SaveLog rpc.
message SaveLogResponse {
  oneof filename_or_data {
    string filename = 1;
    bytes data = 2;
  }
}

// A ParseLogRequest is sent as request to a ParseLog rpc.
message ParseLogRequest {
  string input_filename = 1;
  string test_config_filename = 2;
}

// A ParseLogResponse is received in response to a ParseLog rpc.
message ParseLogResponse {
  bytes data = 1;
}

// A StatusRequest is sent as request to a Status rpc.
message StatusRequest {}

// A StatusResponse is received in response to a Status rpc.
message StatusResponse {
  bool ready = 1;
}
